
data { 
  int<lower=0> N;   // number of observations
  int<lower=1> p;   // number of predictors
  int<lower=1> J;   // number of groups in data (persons)
  int<lower=1> k;   // number of group-level predictors
  int<lower=1,upper=J> group[N]; //group indicator
  matrix[N,p] X;    // fixed-effect design matrix
  matrix[N,k] Z;    // random-effect design matrix
  vector[N] Y;        // response
  
  // Horseshoe prior data
  real<lower=0> scale_icept;    // prior std for the intercept
  real<lower=0> scale_global;   // scale for the half -t prior for tau
  real<lower=1> nu_global;      // degrees of freedom for the half -t priors for tau
  real<lower=1> nu_local;       // degrees of freedom for the half - t priors for lambdas
  real<lower=0> slab_scale;     // slab scale for the regularized horseshoe
  real<lower=0> slab_df;        // slab degrees of freedom for the regularized horseshoe
} 

transformed data { 
  int Pc; 
  matrix[N, p - 1] Xc;    // X centered
  matrix[N, p - 1] Xp;    // X without intercept, non-centered
  vector[p - 1] means_X;  // column means of X before centering 

  Pc = p - 1;  // the intercept is removed from the design matrix 
  for (i in 2:p) { 
     means_X[i - 1] = mean(X[, i]); 
     Xc[, i - 1] = X[, i] - means_X[i - 1]; 
     Xp[, i - 1] = X[, i]; 
  } 
}

parameters { 

  // horseshoe shrinkage parameters 
  real <lower=0> tau;             // global shrinkage parameter
  vector <lower=0>[Pc] lambda;    // local shrinkage parameter
  real<lower=0> caux;
  vector[Pc] zbeta;                 
                
  real temp_Intercept;            // temporary intercept 
  cholesky_factor_corr[k] L;      // Cholesky factor of group ranef corr matrix
  vector<lower=0>[k] sigma_b;     // group-level random-effect standard deviations
  vector[k] z[J];                 // unscaled group-level effects
  
  real<lower=-1,upper=1> ar1;     // autoregressive effect (for order 1)
  vector<lower=0, upper=1000>[N] g_alpha; // alpha (shape) parameter of the gamma distribution
}

transformed parameters {

  vector[N] mu;                   // mean of the effect in arithmetic scale
  vector[N] e;                    // residuals

  // Group variables for AR computation
  real group_size;
  real current_group;

  // Latent variables
  vector[Pc] beta;                // population-level effects (fixed effects)
  vector[k] b[J];                 // group-level effects (random effects)
  vector<lower=0>[N] g_beta;      // beta (rate) parameter of the gamma distribution

  matrix[k, k] Sigma_b;           // variance-covariance matrix of group-level effects
  real<lower=0> sigma_e;          // residual standard deviations 

  // regularized horseshoe parameters
  real<lower=0> c;                    // slab scale 
  vector<lower=0>[Pc] lambda_tilde;   // 'truncated' local shrinkage parameter 

  // Apply regularizing horseshoe prior for betas
  c = slab_scale * sqrt(caux);
  lambda_tilde = sqrt(c^2 * square(lambda) ./ (c^2 + tau^2* square(lambda)));
  beta = zbeta .* lambda_tilde * tau;

  // Premultiply diagonal matrix [sigma_b] with the Cholesky decomposition L of
  // the correlation matrix Sigma_b to get variance-covariance matrix of group-level effects

  // diag(sigma_b) * L
  Sigma_b = diag_pre_multiply(sigma_b, L); 
  
  // Group-level effects are generated by multipying D (Sigma_b) with z that has standard normal distribution
    
  for(j in 1:J) 
    b[j] = Sigma_b * z[j];    

  // - mean, or typical correlation
  mu = temp_Intercept + Xc * beta;
  
  group_size = 0;
  current_group = -1;
  
  // - add group effects
  for (n in 1:N) 
  {
     if (current_group != group[n]) {
       current_group = group[n];
       group_size = 1;
     } 
     else
       group_size += 1;

     mu[n] += Z[n] * b[group[n]]; 

    // - residuals     
    e[n] = Y[n] - mu[n]; 

    // add AR correlations
    if (group_size > 1)
      mu[n] += e[n-1] * ar1;

    // Beta (rate) parameter of the Gamma distribution
    g_beta[n] = g_alpha[n] / exp(mu[n]);     

    // Calculate the variance in absolute scale from the parameters of Gamma
    sigma_e = g_alpha[n] * g_beta[n]^2;
  }
}

model { 

  // Finnish Horseshoe (Regularized Horseshoe) prior
  // half-t priors for lambdas and tau, and inverse-gamma for c^2
  
  zbeta ~ normal(0, 1); 
  lambda ~ student_t(nu_local, 0, 1);
  tau ~ student_t(nu_global, 0, scale_global * sigma_e);
  caux ~ inv_gamma(0.5 * slab_df, 0.5 * slab_df);
  
  sigma_b ~ student_t(3, 0, 10);
  L ~ lkj_corr_cholesky(1);
  
  // insuliinin viitearvo (3-25)
  //Y ~ normal(11,3.6); 
  //target += lognormal_lpdf(Y | log(11), log(3.6));
  
  // Standard normal prior for random effects
  for (j in 1:J)
    z[j] ~ normal(0,1);

  // Likelihood 
  
  // Biometric variables are usually lognormal, rather than normally distributed
  // Log-normal distribution is approximated with Gamma distribution that allows
  // working on the original scale when identity link is used

  Y ~ gamma(g_alpha, g_beta);
}

generated quantities { 
  real beta_Intercept;            // Population-level intercept 
  corr_matrix[k] C; 
  vector[N] Y_rep;                // Repeated response
  vector[N] log_lik;              // log-likelihood for LOO
  vector[k-1] personal_effect[J];

  // Correlation matrix of random-effects, C = L'L
  C = multiply_lower_tri_self_transpose(L); 
  
  beta_Intercept = temp_Intercept - dot_product(means_X, beta);
  
  // Posterior predictive distribution for model checking

  for (n in 1:N) 
  {
    // In Bayesian statistics, personal variation is part of mu, not variance
    Y_rep[n] = gamma_rng(g_alpha[n], g_alpha[n]/exp(beta_Intercept + Xp[n] * beta + Z[n] * b[group[n]]));
    
    // Compute log-Likelihood for LOO comparison of the models 
    log_lik[n] = gamma_lpdf(Y[n] | g_alpha[n], g_alpha[n]/exp(beta_Intercept + Xp[n] * beta + Z[n] * b[group[n]]));
   }

  // Finally, sample personal effects for each nutrient
  for (j in 1:J) 
  {
    // beta vector does not include intercept, b is also sliced not to include it
    personal_effect[j] = beta + b[j][2:k];
  }
} 
