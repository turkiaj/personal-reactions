
data { 
  int<lower=0> N;   // number of observations
  int<lower=1> p;   // number of predictors
  int<lower=1> J;   // number of groups in data (persons)
  int<lower=1> k;   // number of group-level predictors
  int<lower=1,upper=J> group[N]; //group indicator
  matrix[N,p] X;    // fixed-effect design matrix
  matrix[N,k] Z;    // random-effect design matrix
  vector[N] Y;      // response
  real offset;
} 

transformed data { 
  // Centering data for more stable sampling 
  int Pc; 
  matrix[N, p - 1] Xc;    // X centered
  matrix[N, p - 1] Xp;    // X without intercept, non-centered
  vector[p - 1] means_X;  // column means of X before centering 
  
  //real offset = 2;

  Pc = p - 1;  // the intercept is removed from the design matrix 
  for (i in 2:p) { 
     means_X[i - 1] = mean(X[, i]); 
     Xc[, i - 1] = X[, i] - means_X[i - 1]; 
     //Xc[, i - 1] = X[, i]; 
     Xp[, i - 1] = X[, i];
  }
}

parameters { 
  real beta_Intercept;            // temporary intercept 
  vector[Pc] beta;                // poulation-level effects (fixed effects)
  cholesky_factor_corr[k] L;      // Cholesky factor of group ranef corr matrix
  vector<lower=0>[k] sigma_b;     // group-level random-effect standard deviations
  vector[k] z[J];                 // unscaled group-level effects
  real<lower=0> g_log_alpha;      // alpha (shape) parameter of the gamma distribution
}

transformed parameters {
  vector[N] mu;                   // local variable for mean of Normal distribution
  real<lower=0> g_alpha;          // alpha (shape) parameter of the gamma distribution
  vector<lower=0>[N] g_beta;      // beta (rate) of Gamma distribution
  matrix[k, k] Sigma_b;           // variance-covariance matrix of group-level effects
  real<lower=0> sigma_e;          // residual standard deviations 

  vector[k] b[J];                 // group-level effects (random effects)

  // Premultiply diagonal matrix [sigma_b] with the Cholesky decomposition L of
  // the correlation matrix Sigma_b to get variance-covariance matrix of group-level effects

  // diag(sigma_b) * L
  Sigma_b = diag_pre_multiply(sigma_b, L); 
  
  // Group-level effects are generated by multipying D (Sigma_b) with z 
  // that has standard normal distribution
    
  for(j in 1:J) 
    b[j] = Sigma_b * z[j];    
    
  // - mean, or typical correlation
  mu = offset + beta_Intercept + Xc * beta;
  
  // - log transform alpha parameter to keep it positive
  g_alpha = g_log_alpha;

  // - add group effects
  for (n in 1:N) 
  {
     mu[n] += Z[n] * b[group[n]];
     
     // - use identity link for mu
     g_beta[n] = g_alpha / mu[n];
  }
  
  // estimate of variance 
  // (https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4024993/)
  sigma_e = log(1/g_alpha + 1);
}

model { 
  
  // Priors
  
  beta[1] ~ cauchy(0,10); // prior for the intercept following Gelman 2008

  for(i in 2:Pc)
   beta[i] ~ cauchy(0,2.5); //prior for the slopes following Gelman 2008
   
  sigma_b ~ student_t(3, 0, 10);
  L ~ lkj_corr_cholesky(1);
  
  // - standard normal prior for random effects
  for (j in 1:J)
    z[j] ~ normal(0,1);

  // Likelihood: hierarchical gamma regression 

  Y ~ gamma(g_alpha, g_beta);
}

generated quantities { 
  //real beta_Intercept;            // population-level intercept 
  corr_matrix[k] C;               // correlation matrix 
  vector[N] Y_rep;                // repeated response
  vector[N] log_lik;              // log-likelihood for LOO
  //vector[k-1] personal_effect[J];
  real mu_hat;
  real g_beta_hat;

  // Correlation matrix of random-effects, C = L'L
  C = multiply_lower_tri_self_transpose(L); 
  
  //beta_Intercept = temp_Intercept - dot_product(means_X, beta) - offset;

  // Posterior predictive distribution for model checking

  for (n in 1:N) 
  {
    mu_hat = offset + beta_Intercept + Xp[n] * beta + Z[n] * b[group[n]];
    //mu_hat = beta_Intercept + Xc[n] * beta;
    
    g_beta_hat = g_alpha / mu_hat;
    
    Y_rep[n] = gamma_rng(g_alpha, g_beta_hat);
    
    // Compute log-Likelihood for later LOO comparison of the models 
    log_lik[n] = gamma_lpdf(Y[n] | g_alpha, g_beta_hat);
  }

  // Finally, sample personal effects for each nutrient
  //for (j in 1:J) 
  //{
    // beta vector does not include intercept, b is also sliced not to include it
    //personal_effect[j] = beta + b[j][2:k];
  //}
} 
